name: Security & Dependency Check

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  push:
    branches: [ master ]
    paths:
      - 'requirements.txt'
      - 'setup.py'
      - 'pyproject.toml'
  pull_request:
    paths:
      - 'requirements.txt'
      - 'setup.py'
      - 'pyproject.toml'

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep pip-audit

    - name: Check for known security vulnerabilities
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "### Safety Check (Known Vulnerabilities)" >> $GITHUB_STEP_SUMMARY
        
        # Run safety check and capture output
        if safety check --json --output safety-report.json; then
          echo "✅ No known vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security vulnerabilities detected in dependencies" >> $GITHUB_STEP_SUMMARY
          echo "::warning::Security vulnerabilities found in dependencies"
        fi

    - name: Run Bandit security linter
      run: |
        echo "### Bandit Security Linter" >> $GITHUB_STEP_SUMMARY
        
        # Run bandit on source code
        if bandit -r src/ -f json -o bandit-report.json -q; then
          echo "✅ No security issues found in source code" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security issues detected in source code" >> $GITHUB_STEP_SUMMARY
          
          # Show summary of issues
          bandit -r src/ -f txt | tail -20 >> $GITHUB_STEP_SUMMARY || true
        fi

    - name: Run pip-audit
      run: |
        echo "### Pip-Audit Check" >> $GITHUB_STEP_SUMMARY
        
        if pip-audit --format=json --output=pip-audit-report.json; then
          echo "✅ No vulnerabilities found by pip-audit" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Vulnerabilities detected by pip-audit" >> $GITHUB_STEP_SUMMARY
          echo "::warning::Vulnerabilities found by pip-audit"
        fi

    - name: Run Semgrep security analysis
      run: |
        echo "### Semgrep Security Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Run semgrep with Python security rules
        if semgrep --config=auto src/ --json --output=semgrep-report.json --quiet; then
          echo "✅ No security issues found by Semgrep" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security issues detected by Semgrep" >> $GITHUB_STEP_SUMMARY
          
          # Show critical and high severity issues
          semgrep --config=auto src/ --severity=ERROR --severity=WARNING | head -50 >> $GITHUB_STEP_SUMMARY || true
        fi

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          pip-audit-report.json
          semgrep-report.json

  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools pipdeptree outdated

    - name: Check for outdated dependencies
      run: |
        echo "## 📦 Dependency Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Install current requirements
        pip install -r requirements.txt
        
        echo "### Dependency Tree" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        pipdeptree --warn silence | head -30 >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        echo "### Outdated Packages" >> $GITHUB_STEP_SUMMARY
        if pip list --outdated --format=json > outdated.json && [ -s outdated.json ] && [ "$(cat outdated.json)" != "[]" ]; then
          echo "⚠️ The following packages have updates available:" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat outdated.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ All dependencies are up to date" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check dependency conflicts
      run: |
        echo "### Dependency Conflicts" >> $GITHUB_STEP_SUMMARY
        
        # Check for dependency conflicts
        if pip check; then
          echo "✅ No dependency conflicts detected" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Dependency conflicts detected:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          pip check >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi

    - name: Generate dependency report
      run: |
        # Create a comprehensive dependency report
        echo "# Dependency Report - $(date)" > dependency-report.md
        echo "" >> dependency-report.md
        
        echo "## Installed Packages" >> dependency-report.md
        echo '```' >> dependency-report.md
        pip list >> dependency-report.md
        echo '```' >> dependency-report.md
        
        echo "## Dependency Tree" >> dependency-report.md
        echo '```' >> dependency-report.md
        pipdeptree >> dependency-report.md
        echo '```' >> dependency-report.md

    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          dependency-report.md
          outdated.json

  license-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install license checker
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses

    - name: Check licenses
      run: |
        echo "## 📄 License Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Install requirements to check their licenses
        pip install -r requirements.txt
        
        echo "### Package Licenses" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        pip-licenses --format=plain --order=license >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Check for potentially problematic licenses
        problematic_licenses="GPL|AGPL|SSPL|Commons Clause"
        if pip-licenses --format=json | grep -iE "$problematic_licenses"; then
          echo "::warning::Potentially problematic licenses detected"
          echo "⚠️ Review licenses that may have compliance implications" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No obviously problematic licenses detected" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=html --output-file=licenses.html

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.html