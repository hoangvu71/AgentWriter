name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  test-before-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run full test suite
      run: |
        pytest --cov=src tests/ --cov-fail-under=70
      env:
        ENVIRONMENT: production

    - name: Validate critical imports
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        
        # Test all critical components
        from src.core.base_agent import BaseAgent
        from src.database.sqlite.adapter import SQLiteAdapter
        from src.agents.orchestrator import OrchestratorAgent
        from src.agents.loregen import LoreGenAgent
        
        print('✅ All critical components importable')
        "

  build-info:
    runs-on: ubuntu-latest
    needs: test-before-release
    
    steps:
    - uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi

    - name: Generate release notes
      run: |
        echo "## 🚀 AgentWriter Release ${{ steps.version.outputs.version }}" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 📊 Build Information" >> release_notes.md
        echo "- **Commit**: ${{ github.sha }}" >> release_notes.md
        echo "- **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
        echo "- **Python Version**: 3.10+" >> release_notes.md
        echo "" >> release_notes.md
        
        echo "### 🏗️ Architecture Highlights" >> release_notes.md
        echo "- **Modular Agent System**: 9 specialized agents with clean architecture" >> release_notes.md
        echo "- **Database Layer**: Dual Supabase/SQLite support with connection pooling" >> release_notes.md
        echo "- **Refactored Codebase**: All files under 400 lines following issue #4 initiative" >> release_notes.md
        echo "- **Comprehensive Testing**: TDD methodology with extensive test coverage" >> release_notes.md
        echo "" >> release_notes.md
        
        echo "### 🧪 Quality Metrics" >> release_notes.md
        echo "- **Test Files**: $(find tests/ -name "*.py" | wc -l)" >> release_notes.md
        echo "- **Source Files**: $(find src/ -name "*.py" | wc -l)" >> release_notes.md
        echo "- **Modular Components**: $(find src/ -name "*_manager.py" -o -name "*_service.py" -o -name "*_processor.py" | wc -l)" >> release_notes.md
        echo "" >> release_notes.md
        
        echo "### 🔧 Usage" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo '# Install dependencies' >> release_notes.md
        echo 'pip install -r requirements.txt' >> release_notes.md
        echo '' >> release_notes.md
        echo '# Run the application' >> release_notes.md
        echo 'python -m uvicorn src.app:app --reload' >> release_notes.md
        echo '```' >> release_notes.md

    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: release_notes.md

  docker-build:
    runs-on: ubuntu-latest
    needs: test-before-release
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Create Dockerfile if it doesn't exist
      run: |
        if [ ! -f Dockerfile ]; then
          cat > Dockerfile << 'EOF'
        FROM python:3.10-slim

        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application code
        COPY src/ src/
        COPY static/ static/
        COPY templates/ templates/

        # Expose port
        EXPOSE 8000

        # Run the application
        CMD ["python", "-m", "uvicorn", "src.app:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF
        fi

    - name: Build Docker image
      run: |
        docker build -t agentwriter:${{ github.ref_name }} .
        docker save agentwriter:${{ github.ref_name }} > agentwriter-image.tar

    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: agentwriter-image.tar