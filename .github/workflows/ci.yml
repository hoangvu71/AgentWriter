name: CI Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_call:
    inputs:
      run_e2e:
        description: 'Run E2E tests'
        required: false
        default: true
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock flake8 black isort mypy

    - name: Run code formatting checks
      run: |
        # Check if code is formatted with black
        black --check --diff src/ tests/
        
        # Check import sorting
        isort --check-only --diff src/ tests/

    - name: Run linting
      run: |
        # Run flake8 linting
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

    - name: Run type checking
      run: |
        # Run mypy type checking on source code
        mypy src/ --ignore-missing-imports --no-strict-optional

    - name: Run tests with coverage
      run: |
        # Run pytest with coverage
        pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing tests/
      env:
        # Set test environment variables
        ENVIRONMENT: test
        LOG_LEVEL: DEBUG

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities in dependencies
      run: |
        # Check for known security vulnerabilities
        safety check --json || true

    - name: Run security linting
      run: |
        # Run bandit security linter
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json

  integration:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run integration tests
      run: |
        # Run only integration tests
        pytest tests/integration/ -v
      env:
        ENVIRONMENT: test
        LOG_LEVEL: DEBUG

    - name: Test imports and module loading
      run: |
        # Test that all modules can be imported without errors
        python -c "
        import sys
        sys.path.insert(0, 'src')
        
        # Test core imports
        from src.core.base_agent import BaseAgent
        from src.database.sqlite.adapter import SQLiteAdapter
        from src.agents.loregen import LoreGenAgent
        
        print('âœ… All critical imports successful')
        "

  build-info:
    runs-on: ubuntu-latest
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Generate build information
      run: |
        echo "## Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python versions tested**: 3.9, 3.10, 3.11" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "requirements.txt" ]; then
          echo "- **Dependencies**: $(wc -l < requirements.txt) packages" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- **Test files**: $(find tests/ -name "*.py" | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- **Source files**: $(find src/ -name "*.py" | wc -l)" >> $GITHUB_STEP_SUMMARY

  # Call E2E testing workflow
  e2e-tests:
    needs: [test, security]
    if: inputs.run_e2e != false
    uses: ./.github/workflows/e2e.yml
    with:
      test_suite: 'all'
    secrets: inherit